<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        P8Pg/n8D4P//B/D//w////////////////8=
</value>
  </data>
</root>